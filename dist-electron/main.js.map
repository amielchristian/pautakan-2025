{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron';\r\nimport { fileURLToPath } from 'node:url';\r\nimport path from 'node:path';\r\nimport sqlite3 from 'sqlite3';\r\n\r\n// ES modules compatible path resolution\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\n// Log paths for debugging\r\nconsole.log('Current file:', __filename);\r\nconsole.log('Current directory:', __dirname);\r\n\r\n// Application directories\r\nprocess.env.APP_ROOT = path.join(__dirname, '..');\r\nconst APP_ROOT = process.env.APP_ROOT;\r\nconst VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL'];\r\nconst RENDERER_DIST = path.join(APP_ROOT, 'dist');\r\nconst PUBLIC_DIR = VITE_DEV_SERVER_URL ? path.join(APP_ROOT, 'public') : RENDERER_DIST;\r\n\r\n// Log paths for debugging\r\nconsole.log('APP_ROOT:', APP_ROOT);\r\nconsole.log('RENDERER_DIST:', RENDERER_DIST);\r\nconsole.log('PUBLIC_DIR:', PUBLIC_DIR);\r\n\r\n// Window references\r\nlet mainWindow: BrowserWindow | null = null;\r\nlet controlWindow: BrowserWindow | null = null;\r\n\r\n// SQLite setup\r\nconst dbPath = path.join(APP_ROOT, 'college_rankings.db');\r\nconsole.log('Database path:', dbPath);\r\nconst db = new sqlite3.Database(dbPath);\r\n\r\n// College data\r\nconst colleges = [\r\n  { name: 'College of Rehabilitation Sciences', shortHand: 'CRS', imagePath: 'public/ICONS FOR RANKING/CRS.png' },\r\n  { name: 'College of Accountancy', shortHand: 'ACC', imagePath: 'public/ICONS FOR RANKING/ACC.png' },\r\n  { name: 'College of Architecture', shortHand: 'ARKI', imagePath: 'public/ICONS FOR RANKING/ARKI.png' },\r\n  { name: 'Faculty of Arts and Letters', shortHand: 'AB', imagePath: 'public/ICONS FOR RANKING/AB.png' },\r\n  { name: 'Faculty of Civil Law', shortHand: 'LAW', imagePath: 'public/ICONS FOR RANKING/LAW.png' },\r\n  { name: 'College of Commerce and Business Administration', shortHand: 'COMM', imagePath: 'public/ICONS FOR RANKING/COMM.png' },\r\n  { name: 'College of Education', shortHand: 'EDUC', imagePath: 'public/ICONS FOR RANKING/EDUC.png' },\r\n  { name: 'Faculty of Engineering', shortHand: 'ENGG', imagePath: 'public/ICONS FOR RANKING/ENGG.png' },\r\n  { name: 'College of Information and Computing Sciences', shortHand: 'CICS', imagePath: 'public/ICONS FOR RANKING/CICS.png' },\r\n  { name: 'Faculty of Medicine and Surgery', shortHand: 'MED', imagePath: 'public/ICONS FOR RANKING/MED.png' },\r\n  { name: 'Conservatory of Music', shortHand: 'MUSIC', imagePath: 'public/ICONS FOR RANKING/MUSIC.png' },\r\n  { name: 'College of Nursing', shortHand: 'NUR', imagePath: 'public/ICONS FOR RANKING/NURSING.png' },\r\n  { name: 'Faculty of Pharmacy', shortHand: 'PHARMA', imagePath: 'public/ICONS FOR RANKING/PHARMA.png' },\r\n  { name: 'Institute of Physical Education and Athletics', shortHand: 'IPEA', imagePath: 'public/ICONS FOR RANKING/IPEA.png' },\r\n  { name: 'College of Science', shortHand: 'COS', imagePath: 'public/ICONS FOR RANKING/COS.png' },\r\n  { name: 'College of Tourism and Hospitality Management', shortHand: 'CTHM', imagePath: 'public/ICONS FOR RANKING/CTHM.png' },\r\n];\r\n\r\n// Initialize database\r\nfunction initializeDatabase(): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    console.log('Initializing database...');\r\n    \r\n    db.serialize(() => {\r\n      // Create table if it doesn't exist\r\n      db.run(`CREATE TABLE IF NOT EXISTS college (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        name TEXT NOT NULL,\r\n        shortHand TEXT NOT NULL UNIQUE,\r\n        imagePath TEXT NOT NULL,\r\n        score INTEGER DEFAULT 0\r\n      )`, (err) => {\r\n        if (err) {\r\n          console.error('Error creating table:', err);\r\n          reject(err);\r\n          return;\r\n        }\r\n        \r\n        // Check if data exists\r\n        db.get('SELECT COUNT(*) as count FROM college', (err, row: any) => {\r\n          if (err) {\r\n            console.error('Error checking college count:', err);\r\n            reject(err);\r\n            return;\r\n          }\r\n          \r\n          // Insert data if table is empty\r\n          if (row.count === 0) {\r\n            console.log('Populating database with initial data...');\r\n            \r\n            const stmt = db.prepare('INSERT INTO college (name, shortHand, imagePath, score) VALUES (?, ?, ?, ?)');\r\n            \r\n            let completed = 0;\r\n            const total = colleges.length;\r\n            \r\n            colleges.forEach(college => {\r\n              stmt.run(college.name, college.shortHand, college.imagePath, 0, (err) => {\r\n                completed++;\r\n                \r\n                if (err) {\r\n                  console.error(`Error inserting college ${college.shortHand}:`, err);\r\n                }\r\n                \r\n                if (completed === total) {\r\n                  stmt.finalize();\r\n                  console.log('Database initialized with college data');\r\n                  resolve();\r\n                }\r\n              });\r\n            });\r\n          } else {\r\n            console.log('Database already contains college data');\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// Set up IPC handlers\r\nfunction setupIpcHandlers() {\r\n  // Get all colleges\r\n  ipcMain.handle('get-all-colleges', () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.all('SELECT * FROM college ORDER BY score DESC', (err, rows) => {\r\n        if (err) {\r\n          console.error('Error getting colleges:', err);\r\n          reject(err);\r\n        } else {\r\n          resolve(rows);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // Get college by shortHand\r\n  ipcMain.handle('get-college', (_, shortHand) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.get('SELECT * FROM college WHERE shortHand = ?', [shortHand], (err, row) => {\r\n        if (err) {\r\n          console.error(`Error getting college ${shortHand}:`, err);\r\n          reject(err);\r\n        } else {\r\n          resolve(row);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // Update college score\r\n  ipcMain.handle('update-score', (_, shortHand, newScore) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('UPDATE college SET score = ? WHERE shortHand = ?', [newScore, shortHand], function(err) {\r\n        if (err) {\r\n          console.error(`Error updating score for ${shortHand}:`, err);\r\n          reject(err);\r\n        } else {\r\n          // Notify all windows about the update\r\n          BrowserWindow.getAllWindows().forEach(window => {\r\n            window.webContents.send('score-updated', shortHand, newScore);\r\n          });\r\n          resolve({ success: true, changes: this.changes });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // Increment college score\r\n  ipcMain.handle('increment-score', (_, shortHand, increment = 1) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('UPDATE college SET score = score + ? WHERE shortHand = ?', [increment, shortHand], function(err) {\r\n        if (err) {\r\n          console.error(`Error incrementing score for ${shortHand}:`, err);\r\n          reject(err);\r\n        } else {\r\n          // Get the updated score\r\n          db.get('SELECT * FROM college WHERE shortHand = ?', [shortHand], (err, row) => {\r\n            if (err) {\r\n              console.error(`Error getting updated college ${shortHand}:`, err);\r\n              reject(err);\r\n            } else {\r\n              // Notify all windows about the update\r\n              BrowserWindow.getAllWindows().forEach(window => {\r\n                window.webContents.send('score-updated', shortHand, row.score);\r\n              });\r\n              resolve(row);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // Reset all scores\r\n  ipcMain.handle('reset-scores', () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('UPDATE college SET score = 0', function(err) {\r\n        if (err) {\r\n          console.error('Error resetting scores:', err);\r\n          reject(err);\r\n        } else {\r\n          // Notify all windows about the reset\r\n          BrowserWindow.getAllWindows().forEach(window => {\r\n            window.webContents.send('scores-reset');\r\n          });\r\n          resolve({ success: true, changes: this.changes });\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// Create application windows\r\nfunction createWindow() {\r\n  try {\r\n    console.log('Creating windows...');\r\n    \r\n    // Create main window with fullscreen\r\n    mainWindow = new BrowserWindow({\r\n      width: 1920,\r\n      height: 1080,\r\n      webPreferences: {\r\n        preload: path.join(__dirname, 'preload.cjs'), // Changed to .cjs\r\n        contextIsolation: true,\r\n        nodeIntegration: false,\r\n        sandbox: false // Allow preload script to access Node APIs\r\n      },\r\n      frame: false,\r\n      alwaysOnTop: true\r\n    });\r\n    \r\n    // Set fullscreen mode\r\n    mainWindow.setFullScreen(true);\r\n    \r\n    // Create control window\r\n    controlWindow = new BrowserWindow({\r\n      width: 800,\r\n      height: 600,\r\n      webPreferences: {\r\n        preload: path.join(__dirname, 'preload.cjs'), // Changed to .cjs\r\n        contextIsolation: true,\r\n        nodeIntegration: false,\r\n        sandbox: false // Allow preload script to access Node APIs\r\n      }\r\n    });\r\n    \r\n    console.log('Windows created, loading content...');\r\n    \r\n    // Load content based on environment\r\n    if (VITE_DEV_SERVER_URL) {\r\n      console.log('Loading from dev server:', VITE_DEV_SERVER_URL);\r\n      mainWindow.loadURL(VITE_DEV_SERVER_URL);\r\n      controlWindow.loadURL(`${VITE_DEV_SERVER_URL}/control.html`);\r\n    } else {\r\n      console.log('Loading from build files');\r\n      mainWindow.loadFile(path.join(RENDERER_DIST, 'index.html'));\r\n      controlWindow.loadFile(path.join(RENDERER_DIST, 'control.html'));\r\n    }\r\n    \r\n    // Ensure fullscreen on content load\r\n    mainWindow.webContents.on('did-finish-load', () => {\r\n      mainWindow?.webContents.send('main-process-message', 'Window in fullscreen mode');\r\n      \r\n      if (mainWindow && !mainWindow.isFullScreen()) {\r\n        mainWindow.setFullScreen(true);\r\n      }\r\n    });\r\n    \r\n    // Handle fullscreen events\r\n    mainWindow.on('enter-full-screen', () => {\r\n      console.log('Window entered full screen mode');\r\n    });\r\n    \r\n    mainWindow.on('leave-full-screen', () => {\r\n      console.log('Window left full screen mode');\r\n      // Force fullscreen again if user tries to exit\r\n      if (mainWindow) {\r\n        mainWindow.setFullScreen(true);\r\n      }\r\n    });\r\n    \r\n    console.log('Content loaded');\r\n  } catch (error) {\r\n    console.error('Error creating windows:', error);\r\n  }\r\n}\r\n\r\n// Close database when app is closing\r\nfunction closeDatabase(): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    if (db) {\r\n      db.close(err => {\r\n        if (err) {\r\n          console.error('Error closing database:', err);\r\n          reject(err);\r\n        } else {\r\n          console.log('Database connection closed');\r\n          resolve();\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\n// App lifecycle events\r\napp.on('window-all-closed', async () => {\r\n  console.log('All windows closed');\r\n  try {\r\n    await closeDatabase();\r\n  } catch (error) {\r\n    console.error('Error during database close:', error);\r\n  }\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  console.log('App activated');\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\napp.on('before-quit', async (event) => {\r\n  console.log('App quitting...');\r\n  try {\r\n    await closeDatabase();\r\n  } catch (error) {\r\n    console.error('Error during database close:', error);\r\n  }\r\n});\r\n\r\n// Initialize app\r\nconsole.log('App initializing...');\r\napp.whenReady()\r\n  .then(async () => {\r\n    try {\r\n      // Initialize database before creating windows\r\n      await initializeDatabase();\r\n      // Set up IPC handlers\r\n      setupIpcHandlers();\r\n      // Create windows\r\n      createWindow();\r\n      console.log('App startup complete');\r\n    } catch (error) {\r\n      console.error('Error during app initialization:', error);\r\n    }\r\n  })\r\n  .catch(error => {\r\n    console.error('Error during app ready:', error);\r\n  });"],"names":["err"],"mappings":"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"}