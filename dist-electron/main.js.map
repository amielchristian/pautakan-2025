{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron';\r\nimport { fileURLToPath } from 'node:url';\r\nimport path from 'node:path';\r\nimport sqlite3 from 'sqlite3';\r\nimport fs from 'node:fs';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\n// The built directory structure\r\n//\r\n// â”œâ”€â”¬â”€â”¬ dist\r\n// â”‚ â”‚ â””â”€â”€ index.html\r\n// â”‚ â”‚\r\n// â”‚ â”œâ”€â”¬ dist-electron\r\n// â”‚ â”‚ â”œâ”€â”€ main.js\r\n// â”‚ â”‚ â””â”€â”€ preload.mjs\r\n// â”‚\r\nprocess.env.APP_ROOT = path.join(__dirname, '..');\r\n\r\n// ðŸš§ Use ['ENV_NAME'] avoid vite:define plugin - Vite@2.x\r\nexport const VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL'];\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron');\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist');\r\n\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\r\n  ? path.join(process.env.APP_ROOT, 'public')\r\n  : RENDERER_DIST;\r\n\r\nlet mainView: BrowserWindow | null;\r\nlet techView: BrowserWindow | null;\r\n\r\n// DB\r\nfunction initializeDB(): sqlite3.Database {\r\n  const db = new sqlite3.Database('./db.sqlite3', (err) => {\r\n    if (err) {\r\n      console.error(err.message);\r\n    }\r\n  });\r\n  const colleges = JSON.parse(\r\n    fs.readFileSync(\r\n      path.join(process.env.VITE_PUBLIC, './colleges.json'),\r\n      'utf-8'\r\n    )\r\n  );\r\n\r\n  db.serialize(() => {\r\n    db.run('DROP TABLE IF EXISTS colleges');\r\n    db.run(\r\n      'CREATE TABLE IF NOT EXISTS colleges (id INTEGER PRIMARY KEY, name TEXT, shorthand TEXT, imagePath TEXT, score NUMBER)'\r\n    );\r\n    for (const college of colleges) {\r\n      db.run(\r\n        'INSERT INTO colleges (name, shorthand, imagePath, score) VALUES (?, ?, ?, ?)',\r\n        [college.name, college.shortHand, college.imagePath, 0]\r\n      );\r\n    }\r\n  });\r\n\r\n  return db;\r\n}\r\n\r\n// IPC handlers\r\nfunction initializeIPC(db: sqlite3.Database) {\r\n  ipcMain.handle('get-colleges', () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.all('SELECT * FROM colleges', (err, rows) => {\r\n        if (err) {\r\n          console.error(\"Couldn't get colleges\");\r\n          reject(err);\r\n        }\r\n        resolve(rows);\r\n      });\r\n    });\r\n  });\r\n\r\n  // Get college by shortHand\r\n  ipcMain.handle('get-college', (_, shortHand) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.get(\r\n        'SELECT * FROM college WHERE shortHand = ?',\r\n        [shortHand],\r\n        (err, row) => {\r\n          if (err) {\r\n            console.error(`Error getting college ${shortHand}:`, err);\r\n            reject(err);\r\n          } else {\r\n            resolve(row);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  // Update college score\r\n  ipcMain.handle('update-score', (_, shortHand, newScore) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run(\r\n        'UPDATE colleges SET score = ? WHERE shortHand = ?',\r\n        [newScore, shortHand],\r\n        function (err) {\r\n          if (err) {\r\n            console.error(`Error updating score for ${shortHand}:`, err);\r\n            reject(err);\r\n          } else {\r\n            // Notify all windows about the update\r\n            BrowserWindow.getAllWindows().forEach((window) => {\r\n              window.webContents.send('score-updated', shortHand, newScore);\r\n            });\r\n            resolve({ success: true, changes: this.changes });\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  // Increment college score\r\n  ipcMain.handle('increment-score', (_, shortHand, increment = 1) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run(\r\n        'UPDATE college SET score = score + ? WHERE shortHand = ?',\r\n        [increment, shortHand],\r\n        function (err) {\r\n          if (err) {\r\n            console.error(`Error incrementing score for ${shortHand}:`, err);\r\n            reject(err);\r\n          } else {\r\n            // Get the updated score\r\n            db.get(\r\n              'SELECT * FROM college WHERE shortHand = ?',\r\n              [shortHand],\r\n              (err, row) => {\r\n                if (err) {\r\n                  console.error(\r\n                    `Error getting updated college ${shortHand}:`,\r\n                    err\r\n                  );\r\n                  reject(err);\r\n                } else {\r\n                  // Notify all windows about the update\r\n                  BrowserWindow.getAllWindows().forEach((window) => {\r\n                    window.webContents.send(\r\n                      'score-updated',\r\n                      shortHand,\r\n                      row.score\r\n                    );\r\n                  });\r\n                  resolve(row);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  // Reset all scores\r\n  ipcMain.handle('reset-scores', () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('UPDATE college SET score = 0', function (err) {\r\n        if (err) {\r\n          console.error('Error resetting scores:', err);\r\n          reject(err);\r\n        } else {\r\n          // Notify all windows about the reset\r\n          BrowserWindow.getAllWindows().forEach((window) => {\r\n            window.webContents.send('scores-reset');\r\n          });\r\n          resolve({ success: true, changes: this.changes });\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// Views\r\nfunction createWindow() {\r\n  mainView = new BrowserWindow({\r\n    icon: path.join(process.env.VITE_PUBLIC, 'icon.png'),\r\n    // width: 1920,\r\n    // height: 1080,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.mjs'),\r\n    },\r\n    // frame: false,\r\n    // alwaysOnTop: true,\r\n  });\r\n\r\n  // Set fullscreen mode\r\n  // mainView.setFullScreen(true);\r\n\r\n  techView = new BrowserWindow({\r\n    icon: path.join(process.env.VITE_PUBLIC, 'icon.png'),\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.mjs'),\r\n    },\r\n  });\r\n  techView.on('close', () => {\r\n    app.quit();\r\n  });\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    mainView.loadURL(VITE_DEV_SERVER_URL);\r\n    techView.loadURL(VITE_DEV_SERVER_URL + '/control.html');\r\n  } else {\r\n    mainView.loadFile(path.join(RENDERER_DIST, 'index.html'));\r\n    techView.loadFile(path.join(RENDERER_DIST, 'control.html'));\r\n  }\r\n}\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n    mainView = null;\r\n    techView = null;\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\napp.whenReady().then(async () => {\r\n  const db = initializeDB();\r\n  initializeIPC(db);\r\n  createWindow();\r\n});\r\n"],"names":["err"],"mappings":"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"}