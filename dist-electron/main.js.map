{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron';\r\nimport { fileURLToPath } from 'node:url';\r\nimport path from 'node:path';\r\nimport sqlite3 from 'sqlite3';\r\n\r\n// ES modules compatible path resolution\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\n// Log paths for debugging\r\nconsole.log('Current file:', __filename);\r\nconsole.log('Current directory:', __dirname);\r\n\r\n// Application directories\r\nprocess.env.APP_ROOT = path.join(__dirname, '..');\r\nconst APP_ROOT = process.env.APP_ROOT;\r\nconst VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL'];\r\nconst RENDERER_DIST = path.join(APP_ROOT, 'dist');\r\nconst PUBLIC_DIR = VITE_DEV_SERVER_URL\r\n  ? path.join(APP_ROOT, 'public')\r\n  : RENDERER_DIST;\r\n\r\n// Log paths for debugging\r\nconsole.log('APP_ROOT:', APP_ROOT);\r\nconsole.log('RENDERER_DIST:', RENDERER_DIST);\r\nconsole.log('PUBLIC_DIR:', PUBLIC_DIR);\r\n\r\n// Window references\r\nlet mainWindow: BrowserWindow | null = null;\r\nlet controlWindow: BrowserWindow | null = null;\r\n\r\n// SQLite setup\r\nconst dbPath = path.join(APP_ROOT, 'college_rankings.db');\r\nconsole.log('Database path:', dbPath);\r\nconst db = new sqlite3.Database(dbPath);\r\n\r\n// College data\r\nconst colleges = [\r\n  {\r\n    name: 'College of Rehabilitation Sciences',\r\n    shortHand: 'CRS',\r\n    imagePath: 'public/icons/CRS.png',\r\n  },\r\n  {\r\n    name: 'College of Accountancy',\r\n    shortHand: 'ACC',\r\n    imagePath: 'public/icons/ACC.png',\r\n  },\r\n  {\r\n    name: 'College of Architecture',\r\n    shortHand: 'ARKI',\r\n    imagePath: 'public/icons/ARKI.png',\r\n  },\r\n  {\r\n    name: 'Faculty of Arts and Letters',\r\n    shortHand: 'AB',\r\n    imagePath: 'public/icons/AB.png',\r\n  },\r\n  {\r\n    name: 'Faculty of Civil Law',\r\n    shortHand: 'LAW',\r\n    imagePath: 'public/icons/LAW.png',\r\n  },\r\n  {\r\n    name: 'College of Commerce and Business Administration',\r\n    shortHand: 'COMM',\r\n    imagePath: 'public/icons/COMM.png',\r\n  },\r\n  {\r\n    name: 'College of Education',\r\n    shortHand: 'EDUC',\r\n    imagePath: 'public/icons/EDUC.png',\r\n  },\r\n  {\r\n    name: 'Faculty of Engineering',\r\n    shortHand: 'ENGG',\r\n    imagePath: 'public/icons/ENGG.png',\r\n  },\r\n  {\r\n    name: 'College of Information and Computing Sciences',\r\n    shortHand: 'CICS',\r\n    imagePath: 'public/icons/CICS.png',\r\n  },\r\n  {\r\n    name: 'Faculty of Medicine and Surgery',\r\n    shortHand: 'MED',\r\n    imagePath: 'public/icons/MED.png',\r\n  },\r\n  {\r\n    name: 'Conservatory of Music',\r\n    shortHand: 'MUSIC',\r\n    imagePath: 'public/icons/MUSIC.png',\r\n  },\r\n  {\r\n    name: 'College of Nursing',\r\n    shortHand: 'NUR',\r\n    imagePath: 'public/icons/NURSING.png',\r\n  },\r\n  {\r\n    name: 'Faculty of Pharmacy',\r\n    shortHand: 'PHARMA',\r\n    imagePath: 'public/icons/PHARMA.png',\r\n  },\r\n  {\r\n    name: 'Institute of Physical Education and Athletics',\r\n    shortHand: 'IPEA',\r\n    imagePath: 'public/icons/IPEA.png',\r\n  },\r\n  {\r\n    name: 'College of Science',\r\n    shortHand: 'COS',\r\n    imagePath: 'public/icons/COS.png',\r\n  },\r\n  {\r\n    name: 'College of Tourism and Hospitality Management',\r\n    shortHand: 'CTHM',\r\n    imagePath: 'public/icons/CTHM.png',\r\n  },\r\n];\r\n\r\n// Initialize database\r\nfunction initializeDatabase(): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    console.log('Initializing database...');\r\n\r\n    db.serialize(() => {\r\n      // Create table if it doesn't exist\r\n      db.run(\r\n        `CREATE TABLE IF NOT EXISTS college (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        name TEXT NOT NULL,\r\n        shortHand TEXT NOT NULL UNIQUE,\r\n        imagePath TEXT NOT NULL,\r\n        score INTEGER DEFAULT 0\r\n      )`,\r\n        (err) => {\r\n          if (err) {\r\n            console.error('Error creating table:', err);\r\n            reject(err);\r\n            return;\r\n          }\r\n\r\n          // Check if data exists\r\n          db.get('SELECT COUNT(*) as count FROM college', (err, row: any) => {\r\n            if (err) {\r\n              console.error('Error checking college count:', err);\r\n              reject(err);\r\n              return;\r\n            }\r\n\r\n            // Insert data if table is empty\r\n            if (row.count === 0) {\r\n              console.log('Populating database with initial data...');\r\n\r\n              const stmt = db.prepare(\r\n                'INSERT INTO college (name, shortHand, imagePath, score) VALUES (?, ?, ?, ?)'\r\n              );\r\n\r\n              let completed = 0;\r\n              const total = colleges.length;\r\n\r\n              colleges.forEach((college) => {\r\n                stmt.run(\r\n                  college.name,\r\n                  college.shortHand,\r\n                  college.imagePath,\r\n                  0,\r\n                  (err) => {\r\n                    completed++;\r\n\r\n                    if (err) {\r\n                      console.error(\r\n                        `Error inserting college ${college.shortHand}:`,\r\n                        err\r\n                      );\r\n                    }\r\n\r\n                    if (completed === total) {\r\n                      stmt.finalize();\r\n                      console.log('Database initialized with college data');\r\n                      resolve();\r\n                    }\r\n                  }\r\n                );\r\n              });\r\n            } else {\r\n              console.log('Database already contains college data');\r\n              resolve();\r\n            }\r\n          });\r\n        }\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\n// Set up IPC handlers\r\nfunction setupIpcHandlers() {\r\n  // Get all colleges\r\n  ipcMain.handle('get-all-colleges', () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.all('SELECT * FROM college ORDER BY score DESC', (err, rows) => {\r\n        if (err) {\r\n          console.error('Error getting colleges:', err);\r\n          reject(err);\r\n        } else {\r\n          resolve(rows);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // Get college by shortHand\r\n  ipcMain.handle('get-college', (_, shortHand) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.get(\r\n        'SELECT * FROM college WHERE shortHand = ?',\r\n        [shortHand],\r\n        (err, row) => {\r\n          if (err) {\r\n            console.error(`Error getting college ${shortHand}:`, err);\r\n            reject(err);\r\n          } else {\r\n            resolve(row);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  // Update college score\r\n  ipcMain.handle('update-score', (_, shortHand, newScore) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run(\r\n        'UPDATE college SET score = ? WHERE shortHand = ?',\r\n        [newScore, shortHand],\r\n        function (err) {\r\n          if (err) {\r\n            console.error(`Error updating score for ${shortHand}:`, err);\r\n            reject(err);\r\n          } else {\r\n            // Notify all windows about the update\r\n            BrowserWindow.getAllWindows().forEach((window) => {\r\n              window.webContents.send('score-updated', shortHand, newScore);\r\n            });\r\n            resolve({ success: true, changes: this.changes });\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  // Increment college score\r\n  ipcMain.handle('increment-score', (_, shortHand, increment = 1) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run(\r\n        'UPDATE college SET score = score + ? WHERE shortHand = ?',\r\n        [increment, shortHand],\r\n        function (err) {\r\n          if (err) {\r\n            console.error(`Error incrementing score for ${shortHand}:`, err);\r\n            reject(err);\r\n          } else {\r\n            // Get the updated score\r\n            db.get(\r\n              'SELECT * FROM college WHERE shortHand = ?',\r\n              [shortHand],\r\n              (err, row) => {\r\n                if (err) {\r\n                  console.error(\r\n                    `Error getting updated college ${shortHand}:`,\r\n                    err\r\n                  );\r\n                  reject(err);\r\n                } else {\r\n                  // Notify all windows about the update\r\n                  BrowserWindow.getAllWindows().forEach((window) => {\r\n                    window.webContents.send(\r\n                      'score-updated',\r\n                      shortHand,\r\n                      row.score\r\n                    );\r\n                  });\r\n                  resolve(row);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  // Reset all scores\r\n  ipcMain.handle('reset-scores', () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('UPDATE college SET score = 0', function (err) {\r\n        if (err) {\r\n          console.error('Error resetting scores:', err);\r\n          reject(err);\r\n        } else {\r\n          // Notify all windows about the reset\r\n          BrowserWindow.getAllWindows().forEach((window) => {\r\n            window.webContents.send('scores-reset');\r\n          });\r\n          resolve({ success: true, changes: this.changes });\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// Create application windows\r\nfunction createWindow() {\r\n  try {\r\n    console.log('Creating windows...');\r\n\r\n    // Create main window with fullscreen\r\n    mainWindow = new BrowserWindow({\r\n      width: 1920,\r\n      height: 1080,\r\n      webPreferences: {\r\n        preload: path.join(__dirname, 'preload.cjs'), // Changed to .cjs\r\n        contextIsolation: true,\r\n        nodeIntegration: false,\r\n        sandbox: false, // Allow preload script to access Node APIs\r\n      },\r\n      frame: false,\r\n      alwaysOnTop: true,\r\n    });\r\n\r\n    // Set fullscreen mode\r\n    mainWindow.setFullScreen(true);\r\n\r\n    // Create control window\r\n    controlWindow = new BrowserWindow({\r\n      width: 800,\r\n      height: 600,\r\n      webPreferences: {\r\n        preload: path.join(__dirname, 'preload.cjs'), // Changed to .cjs\r\n        contextIsolation: true,\r\n        nodeIntegration: false,\r\n        sandbox: false, // Allow preload script to access Node APIs\r\n      },\r\n    });\r\n\r\n    console.log('Windows created, loading content...');\r\n\r\n    // Load content based on environment\r\n    if (VITE_DEV_SERVER_URL) {\r\n      console.log('Loading from dev server:', VITE_DEV_SERVER_URL);\r\n      mainWindow.loadURL(VITE_DEV_SERVER_URL);\r\n      controlWindow.loadURL(`${VITE_DEV_SERVER_URL}/control.html`);\r\n    } else {\r\n      console.log('Loading from build files');\r\n      mainWindow.loadFile(path.join(RENDERER_DIST, 'index.html'));\r\n      controlWindow.loadFile(path.join(RENDERER_DIST, 'control.html'));\r\n    }\r\n\r\n    // Ensure fullscreen on content load\r\n    mainWindow.webContents.on('did-finish-load', () => {\r\n      mainWindow?.webContents.send(\r\n        'main-process-message',\r\n        'Window in fullscreen mode'\r\n      );\r\n\r\n      if (mainWindow && !mainWindow.isFullScreen()) {\r\n        mainWindow.setFullScreen(true);\r\n      }\r\n    });\r\n\r\n    // Handle fullscreen events\r\n    mainWindow.on('enter-full-screen', () => {\r\n      console.log('Window entered full screen mode');\r\n    });\r\n\r\n    mainWindow.on('leave-full-screen', () => {\r\n      console.log('Window left full screen mode');\r\n      // Force fullscreen again if user tries to exit\r\n      if (mainWindow) {\r\n        mainWindow.setFullScreen(true);\r\n      }\r\n    });\r\n\r\n    console.log('Content loaded');\r\n  } catch (error) {\r\n    console.error('Error creating windows:', error);\r\n  }\r\n}\r\n\r\n// Close database when app is closing\r\nfunction closeDatabase(): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    if (db) {\r\n      db.close((err) => {\r\n        if (err) {\r\n          console.error('Error closing database:', err);\r\n          reject(err);\r\n        } else {\r\n          console.log('Database connection closed');\r\n          resolve();\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\n// App lifecycle events\r\napp.on('window-all-closed', async () => {\r\n  console.log('All windows closed');\r\n  try {\r\n    await closeDatabase();\r\n  } catch (error) {\r\n    console.error('Error during database close:', error);\r\n  }\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  console.log('App activated');\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\napp.on('before-quit', async (event) => {\r\n  console.log('App quitting...');\r\n  try {\r\n    await closeDatabase();\r\n  } catch (error) {\r\n    console.error('Error during database close:', error);\r\n  }\r\n});\r\n\r\n// Initialize app\r\nconsole.log('App initializing...');\r\napp\r\n  .whenReady()\r\n  .then(async () => {\r\n    try {\r\n      // Initialize database before creating windows\r\n      await initializeDatabase();\r\n      // Set up IPC handlers\r\n      setupIpcHandlers();\r\n      // Create windows\r\n      createWindow();\r\n      console.log('App startup complete');\r\n    } catch (error) {\r\n      console.error('Error during app initialization:', error);\r\n    }\r\n  })\r\n  .catch((error) => {\r\n    console.error('Error during app ready:', error);\r\n  });\r\n"],"names":["err"],"mappings":"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"}