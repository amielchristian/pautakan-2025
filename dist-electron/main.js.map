{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron';\r\nimport { fileURLToPath } from 'node:url';\r\nimport path from 'node:path';\r\nimport sqlite3 from 'sqlite3';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\n// The built directory structure\r\n//\r\n// â”œâ”€â”¬â”€â”¬ dist\r\n// â”‚ â”‚ â””â”€â”€ index.html\r\n// â”‚ â”‚\r\n// â”‚ â”œâ”€â”¬ dist-electron\r\n// â”‚ â”‚ â”œâ”€â”€ main.js\r\n// â”‚ â”‚ â””â”€â”€ preload.mjs\r\n// â”‚\r\nprocess.env.APP_ROOT = path.join(__dirname, '..');\r\n\r\n// ðŸš§ Use ['ENV_NAME'] avoid vite:define plugin - Vite@2.x\r\nexport const VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL'];\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron');\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist');\r\n\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\r\n  ? path.join(process.env.APP_ROOT, 'public')\r\n  : RENDERER_DIST;\r\n\r\nlet mainView: BrowserWindow | null;\r\nlet techView: BrowserWindow | null;\r\n\r\n// DB\r\nconst db = new sqlite3.Database('./db.sqlite3', (err) => {\r\n  if (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\ndb.serialize(() => {\r\n  db.run(\r\n    'CREATE TABLE IF NOT EXISTS colleges (id INTEGER PRIMARY KEY, name TEXT, shorthand TEXT, imagePath TEXT)'\r\n  );\r\n\r\n  db.run('INSERT INTO colleges (name, shorthand, imagePath) VALUES (?, ?, ?)', [\r\n    'College of Science',\r\n    'COS',\r\n    'cos.png',\r\n  ]);\r\n});\r\n\r\nfunction initializeIPC() {\r\n  ipcMain.handle('getColleges', () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.all('SELECT * FROM colleges', (err, rows) => {\r\n        if (err) {\r\n          console.error(\"Couldn't get colleges\");\r\n          reject(err);\r\n        }\r\n        resolve(rows);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// View\r\n\r\nfunction createWindow() {\r\n  mainView = new BrowserWindow({\r\n    icon: path.join(process.env.VITE_PUBLIC, 'electron-vite.svg'),\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.mjs'),\r\n    },\r\n  });\r\n\r\n  techView = new BrowserWindow({\r\n    icon: path.join(process.env.VITE_PUBLIC, 'electron-vite.svg'),\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.mjs'),\r\n    },\r\n  });\r\n\r\n  // Test active push message to Renderer-process.\r\n  mainView.webContents.on('did-finish-load', () => {\r\n    mainView?.webContents.send(\r\n      'main-process-message',\r\n      new Date().toLocaleString()\r\n    );\r\n  });\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    mainView.loadURL(VITE_DEV_SERVER_URL);\r\n    techView.loadURL(VITE_DEV_SERVER_URL + '/control.html');\r\n  } else {\r\n    mainView.loadFile(path.join(RENDERER_DIST, 'index.html'));\r\n    techView.loadFile(path.join(RENDERER_DIST, 'control.html'));\r\n  }\r\n}\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n    mainView = null;\r\n    techView = null;\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\napp.whenReady().then(async () => {\r\n  initializeIPC();\r\n  createWindow();\r\n});\r\n"],"names":[],"mappings":";;;;AAKA,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAW7D,QAAA,IAAY,WAAW,KAAK,KAAK,WAAW,IAAI;AAGnC,MAAA,sBAAsB,YAAY,qBAAqB;AAC7D,MAAM,YAAY,KAAK,KAAK,QAAA,IAAY,UAAU,eAAe;AACjE,MAAM,gBAAgB,KAAK,KAAK,QAAA,IAAY,UAAU,MAAM;AAEnE,QAAA,IAAY,cAAc,sBACtB,KAAK,KAAK,QAAY,IAAA,UAAU,QAAQ,IACxC;AAEJ,IAAI;AACJ,IAAI;AAGJ,MAAM,KAAK,IAAI,QAAQ,SAAS,gBAAgB,CAAC,QAAQ;AACvD,MAAI,KAAK;AACC,YAAA,MAAM,IAAI,OAAO;AAAA,EAAA;AAE7B,CAAC;AACD,GAAG,UAAU,MAAM;AACd,KAAA;AAAA,IACD;AAAA,EACF;AAEA,KAAG,IAAI,sEAAsE;AAAA,IAC3E;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AACH,CAAC;AAED,SAAS,gBAAgB;AACf,UAAA,OAAO,eAAe,MAAM;AAClC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,SAAG,IAAI,0BAA0B,CAAC,KAAK,SAAS;AAC9C,YAAI,KAAK;AACP,kBAAQ,MAAM,uBAAuB;AACrC,iBAAO,GAAG;AAAA,QAAA;AAEZ,gBAAQ,IAAI;AAAA,MAAA,CACb;AAAA,IAAA,CACF;AAAA,EAAA,CACF;AACH;AAIA,SAAS,eAAe;AACtB,aAAW,IAAI,cAAc;AAAA,IAC3B,MAAM,KAAK,KAAK,QAAA,IAAY,aAAa,mBAAmB;AAAA,IAC5D,gBAAgB;AAAA,MACd,SAAS,KAAK,KAAK,WAAW,aAAa;AAAA,IAAA;AAAA,EAC7C,CACD;AAED,aAAW,IAAI,cAAc;AAAA,IAC3B,MAAM,KAAK,KAAK,QAAA,IAAY,aAAa,mBAAmB;AAAA,IAC5D,gBAAgB;AAAA,MACd,SAAS,KAAK,KAAK,WAAW,aAAa;AAAA,IAAA;AAAA,EAC7C,CACD;AAGQ,WAAA,YAAY,GAAG,mBAAmB,MAAM;AAC/C,yCAAU,YAAY;AAAA,MACpB;AAAA,OACA,oBAAI,KAAK,GAAE,eAAe;AAAA;AAAA,EAC5B,CACD;AAED,MAAI,qBAAqB;AACvB,aAAS,QAAQ,mBAAmB;AAC3B,aAAA,QAAQ,sBAAsB,eAAe;AAAA,EAAA,OACjD;AACL,aAAS,SAAS,KAAK,KAAK,eAAe,YAAY,CAAC;AACxD,aAAS,SAAS,KAAK,KAAK,eAAe,cAAc,CAAC;AAAA,EAAA;AAE9D;AAKA,IAAI,GAAG,qBAAqB,MAAM;AAC5B,MAAA,QAAQ,aAAa,UAAU;AACjC,QAAI,KAAK;AACE,eAAA;AACA,eAAA;AAAA,EAAA;AAEf,CAAC;AAED,IAAI,GAAG,YAAY,MAAM;AAGvB,MAAI,cAAc,gBAAgB,WAAW,GAAG;AACjC,iBAAA;AAAA,EAAA;AAEjB,CAAC;AAED,IAAI,UAAA,EAAY,KAAK,YAAY;AACjB,gBAAA;AACD,eAAA;AACf,CAAC;"}